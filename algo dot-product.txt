// procedure calculate ps
PROCEDURE dot_product(v1: ARRAY_OF FLOAT[2]; v2: ARRAY_OF FLOAT[2];)
VAR
    i: INTEGER;
    ps: FLOAT;
BEGIN
    ps=0;
    FOR i FROM 0 TO v1.length-1 DO
        ps= ps+(v1[i]*v2[i]);
    END_FOR
    write("ps");
END
// function calculate ps
FUNCTION dot_product(v1: ARRAY_OF FLOAT[2];v2: ARRAY_OF FLOAT[2];) : FLOAT
VAR
    i: INTEGER;
    ps: FLOAT;
BEGIN
    ps=0;
    FOR i FROM 0 TO v1.length-1 STEP  DO
        ps=ps+(v1[i]*v2[i]);
    END_FOR
    RETURN ps ;
END

// algorithm with procedure
ALGORITHM dot_scalar
VAR
    tab: ARRAY_OF FLOAT[n];
    v1,v2: ARRAY_OF FLOAT[2];
    i,j,n : INTEGER; 
    ps: FLOAT; 
BEGIN
REPEAT
    read(n);
UNTIL (n%2=0)
    FOR i FROM 0 TO n-1    DO
    FOR j FROM i+1 TO n DO
        v1=tab[i];
        v2=tab[j];
        ps=0
        dot_product(v1,v2);
        write("ps");
        IF (ps=0) THEN
            write("v1 et v2 sont orthogonaux")
        ELSE
            write("v1 et v2 ne sont pas orthogonaux")
        END_IF
    END_FOR
    END_FOR
END

// algorithm with function 
ALGORITHM dot_scalar
VAR
    tab: ARRAY_OF FLOAT[n];
    i,j,n : INTEGER;  
BEGIN
REPEAT
    read(n);
UNTIL (n%2=0)
    FOR i FROM 0 TO n-1    DO
    FOR j FROM i+1 TO n DO
        v1=tab[i];
        v2=tab[j];
        ps:=dot_product(v1,v2);
        write("ps");
        IF (ps=0) THEN
            write("v1 et v2 sont orthogonaux")
        ELSE
            write("v1 et v2 ne sont pas orthogonaux")
        END_IF
    END_FOR
    END_FOR
END